#############################
# Build a new world.db

# stdlibs

require 'pp'

## $DEBUG = true
$RUBYLIBS_DEBUG = true


# 3rd party libs/gems

require 'logutils'
require 'logutils/activerecord'
require 'worlddb'
require 'beerdb'


# our own code

##
# output settings


BUILD_DIR     = "./build"
DOWNLOAD_DIR  = "./build/dl"

BEER_BOOK_URL      = "https://github.com/book-templates/beer/archive/gh-pages.zip"
BEER_BOOK_ZIP_PATH = "#{DOWNLOAD_DIR}/beer-book.zip"


BEER_DB_PATH = "#{BUILD_DIR}/beer.db"

DB_CONFIG = {
  adapter:  'sqlite3',
  database:  BEER_DB_PATH
}


task :default => :build

directory BUILD_DIR     # make sure it exists
directory DOWNLOAD_DIR


### create a DATAFILE_OPENMUNDI ???
## create more DATAFILEs for by,cz,world,etc??

###
# todo: how to add great-beers-collection w/ quick reader ???

###
## todo/check - fetch DATAFILE from repo (do NOT duplicate here!!!!)

DATAFILE_AT = <<EOS
  world  'openmundi/world.db',   setup: 'countries'
  world  'openmundi/austria.db'
  beer   'openbeer/at-austria'
EOS

builder = Datafile::Builder.load( DATAFILE_AT )
datafile = builder.datafile


task :dl do
  datafile.dump   ## for debugging
  datafile.download
end



task :env => BUILD_DIR do
  pp DB_CONFIG
  ActiveRecord::Base.establish_connection( DB_CONFIG )
  ## LogUtils::Logger.root.level = :info
end



desc "clean world.db build"
task :build => [:clean,:create,:load] do
  puts 'Done.'
end


task :clean do
  rm BEER_DB_PATH if File.exists?( BEER_DB_PATH )
end

desc "create beer.db schema"
task :create => :env do
  BeerDb.create_all
end

task :load => :env do
  datafile.dump  ## for debugging
  datafile.read
end



namespace :book do
  task :dl => [BUILD_DIR, DOWNLOAD_DIR] do
    ### use shell or system instead of backticks??
     ## get and unzip book templates
    `wget -O #{BEER_BOOK_ZIP_PATH} #{BEER_BOOK_URL}`
    `unzip #{BEER_BOOK_ZIP_PATH} -d #{BUILD_DIR}`
  end

  task :book => :env do
    PAGES_DIR     = "#{BUILD_DIR}/beer-gh-pages/_pages"
    TEMPLATES_DIR = "#{BUILD_DIR}/beer-gh-pages/_templates"

    require 'hybook'   # book builder n helpers

    require "#{BUILD_DIR}/beer-gh-pages/_scripts/book"

    puts "  contintents: #{WorldDb::Model::Continent.count}"

    ## build book (draft version) - The Free World Fact Book - from world.db
    build_book() # multi-page version
    ### build_book( inline: true ) # all-in-one-page version a.k.a. inline version

    puts 'Done.'
  end
end

