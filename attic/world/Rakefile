#############################
# Build a new world.db

# stdlibs

require 'pp'

## $DEBUG = true
$RUBYLIBS_DEBUG = true


# 3rd party libs/gems

require 'logutils'
require 'logutils/activerecord'
require 'worlddb'

require 'beerdb'    ## include for Datafile machinery - hack for now
### require 'datafile'  ## check - make sure it gets add to worlddb


# our own code

##
# output settings


BUILD_DIR     = "./build"
DOWNLOAD_DIR  = "./build/dl"

WORLD_BOOK_URL      = "https://github.com/book-templates/world/archive/gh-pages.zip"
WORLD_BOOK_ZIP_PATH = "#{DOWNLOAD_DIR}/world-book.zip"


WORLD_DB_PATH = "#{BUILD_DIR}/world.db"

DB_CONFIG = {
  adapter:  'sqlite3',
  database:  WORLD_DB_PATH    ## convert to absolute path ??
}


task :default => :build

directory BUILD_DIR     # make sure it exists
directory DOWNLOAD_DIR

DATAFILE_WORLD = <<EOS
  world  'openmundi/world.db',   setup: 'countries'
  ### world  'openmundi/austria.db'
EOS

builder = Datafile::Builder.load( DATAFILE_WORLD )
datafile = builder.datafile


task :dl do
  datafile.dump   ## for debugging
  datafile.download
end


task :env => BUILD_DIR do
  pp DB_CONFIG
  ActiveRecord::Base.establish_connection( DB_CONFIG )

  ## LogUtils::Logger.root.level = :info
end



desc "clean world.db build"
task :build => [:clean,:create,:load] do
  puts 'Done.'
end

task :clean do
  rm WORLD_DB_PATH if File.exists?( WORLD_DB_PATH )
end

desc "create world.db schema"
task :create => :env do
  WorldDb.create_all
end

task :load => :env do
  datafile.dump   ## for debugging
  datafile.read
end

task :stats => :env do
  puts "  contintents: #{WorldDb::Model::Continent.count}"
end


##################
####################

namespace :book do
  task :dl => [BUILD_DIR, DOWNLOAD_DIR] do
    ## get and unzip book templates
    `wget -O #{WORLD_BOOK_ZIP_PATH} #{WORLD_BOOK_URL}`
    `unzip #{WORLD_BOOK_ZIP_PATH} -d #{BUILD_DIR}`
  end

  task :build => :env do
    PAGES_DIR     = "#{BUILD_DIR}/world-gh-pages/_pages"
    TEMPLATES_DIR = "#{BUILD_DIR}/world-gh-pages/_templates"

    require 'hybook'   # book builder n helpers

    require "#{BUILD_DIR}/world-gh-pages/_scripts/book"

    puts "  contintents: #{WorldDb::Model::Continent.count}"

    ## build book (draft version) - The Free World Fact Book - from world.db
    build_book() # multi-page version
    ### build_book( inline: true ) # all-in-one-page version a.k.a. inline version

    puts 'Done.'
  end
end

